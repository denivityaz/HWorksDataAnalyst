import pandas as pd
'''
Попробуйте создать объект типа Series с индексом, 
содержащим повторяющиеся элементы. 
Что вы ожидаете увидеть в результате выполнения такого кода? 
Что вы ожидаете пронаблюдать в случае обращения к этому объекту 
по тому индексу, который повторяется? 
Что происходит на самом деле? 
'''

data_exmpl = [1,2,3,4,5]
idx_data_exmpl = ['a','b','c','d','a']
data_with_idx = pd.Series(data_exmpl,idx_data_exmpl)
print(data_with_idx.loc[['a', 'b']])

# pandas сохраняет повторяющиеся индексы

# когда полезно?
'''
Агрегация и анализ данных: Позволяют проводить агрегацию данных по одинаковым индексам.
Группировка данных: Используются для группировки данных по категориям или временным интервалам.
Временные ряды: Часто возникают при работе с временными рядами, где временные метки могут повторяться.
Многомерные данные: Могут встречаться в DataFrame и использоваться для обработки многомерных данных.
Обработка ошибок: Необходимы при обработке дубликатов или ошибок при слиянии или объединении данных.

'''

'''
Создайте объект типа Series, используя для этого словарь с пятью
ключами и значениями, указав в качестве индекса список, 
содержащий в себе только 3 ключа из словаря. 
Как устроен получившийся объект?
Опишите наблюдаемый результат.
'''

data_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
idx_data_dict = ['c','d','e']

data_dict_with_idx = pd.Series(data_dict,idx_data_dict)
print(data_dict_with_idx)

# индекс в pandas и есть ключ словаря, а не b tree там какие-нибудь

'''
3.Создайте объект типа Series, состоящий из квадратов чисел от 1 до 20. 
Возьмите из него только те элементы, индекс которых 
не делится на 3
'''

another_data = {i: i**2 for i in range(1,21)}
key_data = pd.Series(another_data)

key_where_not_3 = key_data[key_data.index % 3 != 0]
print(key_where_not_3)

